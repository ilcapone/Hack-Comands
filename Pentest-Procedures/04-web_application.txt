
https://support.insomnia.rest/article/23-installation
https://github.com/michenriksen/aquatone

## Recon subdomain
https://github.com/six2dez/reconftw

# Disobering de IPs reales a traves de CloudFail
https://github.com/HatBashBR/HatCloud
https://github.com/m0rtem/CloudFail 

https://github.com/RhinoSecurityLabs/SleuthQL

https://github.com/klsecservices/rpivot

https://github.com/apenwarr/sshuttle

## tutorial
https://artkond.com/2017/03/23/pivoting-guide/

## Wen Vulneravility Scans
https://github.com/projectdiscovery/nuclei

## URL Encoding CheatSeat
https://www.w3schools.com/tags/ref_urlencode.asp?_sm_au_=iVVDMg0TSmrMV6Dm
	
## How to pentest web aplication procedures
	1 - Walking the web applicaiton. Review al functionalities, paths and content
	2 - Content Discovery: Robots, sitmap, HTTP headers, Framwork, OSSINT, Google Dorks
	3 - Subdomain enumeration:
			> OSINT: SSL/TLS Certs
			> OSINT: SearchEngines
			> Bruteforce: Dnsrecon
			> Sublist3r
			> Virtual Host
	4 - Autenticaction Bypass
			> Creating list of potential users
			> Userenumeration in singup and login
			> Bruteforce with know passwords
			> Logic Flaw
			> Cookie Tampering
	5 - IDOR (Insecure Direct Object Reference)
			> Search in: URLs, base64 strings, hashs strings
			> Create two users and review diferenct content
	6 - File Inclusion
			> LFI (Local File Inclusion), RFI (Remote File Inclusion), Directory Transversal
			> Path Transversal or Directory transversal
				* Allow read file content from other system directories
				* file_get_contents - PHP Potential Vulnerable function
			> LFI
			    * I could find both in the parameters of the query and in the body as well as in cookies.
			    	> If test GET try url query
			    	> If test POST use body param
				* Bypass develop adding extension ass .php with NULL BYTE %00 or 0x00
						- WARNING! is fixed and not working with PHP 5.3.4 and above
				* If there is an specific filter for specific paths like "/etc/passwd" its posible to add "/."" or "/../passwd" at the end to bypass it.
				* If there is a replacement for "../" its posible to bypass with "....//....//"
				* If there is a control for specifyc path read, it is posible to bypass by adding this path at the beginin "specific path ../../../etc/passwd"
			> RFI
				* RFI occurs when improperly sanitizing user input, allowing an attacker to inject an external URL into include function.
	7 - SSRF (Server-Side Request Forgery)
			> Where to finde:
				* URL is used in a parameter
				* Hidden field in form
				* Hostname in a parameter
				* Paths in params
			> At the end of the query add "&x=" to finish the query and start another
	8 - XSS (Cross-Site Scripting)
			> Clasic: <script>alert('XSS');</script>
			> Reflected XSS: Reflected XSS happens when user-supplied data in an HTTP request is included in the webpage source without any validation.
			> Stored XSS: As the name infers, the XSS payload is stored on the web application (in a database, for example) and then gets run when other users visit the site or web page.
			> DOM Based XSS: DOM stands for Document Object Model and is a programming interface for HTML and XML documents. DOM Based XSS is where the JavaScript execution happens directly in the browser without any new pages being loaded or data submitted to backend code. Execution occurs when the website JavaScript code acts on input or user interaction.
			> Blind XSS: Blind XSS is similar to a stored XSS (which we covered in task 4) in that your payload gets stored on the website for another user to view, but in this instance, you can't see the payload working or be able to test it against yourself first.
	9 - Command Injection - RCE (Remote Command Execution)
			> Blind command injection is when command injection occurs; however, there is no output visible, so it is not immediately noticeable. For example, a command is executed, but the web application outputs no message.
			> Verbose command injection is when the application gives you feedback or output as to what is happening or being executed.
	10 - SQL Injection
			> The point wherein a web application using SQL can turn into SQL Injection is when user-provided data gets included in the SQL query.
			> Finish queri ":--" The semicolon in the URL signifies the end of the SQL statement, and the two dashes cause everything afterwards to be treated as a comment.
			> In-Band SQLi: In-Band just refers to the same method of communication being used to exploit the vulnerability and also receive the results, for example, discovering an SQL Injection vulnerability on a website page and then being able to extract data from the database to the same page..
				* Error-Based SQL Injection: This type of SQL Injection is the most useful for easily obtaining information about the database structure as error messages from the database are printed directly to the browser screen.
				* Union-Based SQL Injection: This type of Injection utilises the SQL UNION operator alongside a SELECT statement to return additional results to the page.
			> Blind SQLi: blind SQLi is when we get little to no feedback to confirm whether our injected queries were, in fact, successful or not, this is because the error messages have been disabled, but the injection still works regardless.
				* Boolean Based: Boolean based SQL Injection refers to the response we receive back from our injection attempts which could be a true/false, yes/no, on/off, 1/0 or any response which can only ever have two outcomes.
				* Time Based: there is no visual indicator of your queries being wrong or right this time. Instead, your indicator of a correct query is based on the time the query takes to complete. This time delay is introduced by using built-in methods such as SLEEP(x) alongside the UNION statement. The SLEEP() method will only ever get executed upon a successful UNION SELECT statement. 
			> Out-Banded SQLi: An Out-Of-Band attack is classified by having two different communication channels, one to launch the attack and the other to gather the results. For example, the attack channel could be a web request, and the data gathering channel could be monitoring HTTP/DNS requests made to a service you control.

			

