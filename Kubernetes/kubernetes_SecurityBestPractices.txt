
				 #########################################################
				 ###												   ###
				 ### Security Best Practices for Kubernetes Deployment ###
				 ###												   ###
				 #########################################################
 
 - Fuente: https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/
 
 
			## Ensure That Images Are Free of Vulnerabilities ##
			
 - Implement Continuous Security Vulnerability Scanning
 - Regularly Apply Security Updates to Your Environment 
 
 
 
			## Ensure That Only Authorized Images are Used in Your Environment ##
			
 - Use private registries to store your approved images
 - Build a CI pipeline that integrates security assessment (like vulnerability scanning), making it part of the build process.
			* Once an image is built, it should be scanned for security vulnerabilities, and only if no issues are found then the image would be pushed to a private registry, from which deployment to production is done. A failure in the security assessment should create a failure in the pipeline, preventing images with bad security quality from being pushed to the image registry.

			
 
			## Limit Direct Access to Kubernetes Nodes ##
			
 - Limit SSH access to Kubernetes nodes
 - Use Kubernetes Authorization Plugins to further control user access to resources.
			* https://kubernetes.io/docs/reference/access-authn-authz/authorization/
 

			
			## Create Administrative Boundaries between Resources (Pod Security Policies)##
			
 - Use Kubernetes Authorization plugins to create policies that segregate access to namespace resources between different users.
 - For example: the following policy will allow ‘alice’ to read pods from namespace ‘fronto’.
			* {
				"apiVersion": "abac.authorization.kubernetes.io/v1beta1",
				"kind": "Policy",
						"spec": {
						"user": "alice",
						"namespace": "fronto",
						"resource": "pods",
						"readonly": true
						}
				}
  - More info: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#policy-reference


				
			## Define Resource Quota ##
			
 - An option of running resource-unbound containers puts your system in risk of DoS or “noisy neighbor” scenarios. create resource quota policies, attached to Kubernetes namespace, in order to limit the CPU and memory a pod is allowed to consume.
 - The following is an example for namespace resource quota definition that will limit number of pods in the namespace to 4, limiting their CPU requests between 1 and 2 and memory requests between 1GB to 2GB.
			* compute-resources.yaml:
										apiVersion: v1  
										kind: ResourceQuota  
										metadata:  
										  name: compute-resources  
										spec:  
										  hard:  
											pods: "4"  
											requests.cpu: "1"  
											requests.memory: 1Gi  
											limits.cpu: "2"  
											limits.memory: 2Gi
			* Assign a resource quota to namespace:
										kubectl create -f ./compute-resources.yaml --namespace=myspace
					

					
			## Implement Network Segmentation ##
			
 - Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Is important to ensure that containers can communicate only with those they are supposed to.
 - Users of Google Cloud Platform can benefit from automatic firewall rules, preventing cross-cluster communication. 
 - There is work being done in this area by the Kubernetes Network SIG, which will greatly improve the pod-to-pod communication policies. 
 - The following is an example of a network policy that controls the network for “backend” pods, only allowing inbound network access from “frontend” pods:
			* POST /apis/net.alpha.kubernetes.io/v1alpha1/namespaces/tenant-a/networkpolicys  
				{  
				  "kind": "NetworkPolicy",
				  "metadata": {
					"name": "pol1"
				  },
				  "spec": {
					"allowIncoming": {
					  "from": [{
						"pods": { "segment": "frontend" }
					  }],
					  "toPorts": [{
						"port": 80,
						"protocol": "TCP"
					  }]
					},
					"podSelector": {
					  "segment": "backend"
					}
				  }
				}
 - More info: https://kubernetes.io/blog/2016/04/kubernetes-network-policy-apis/
 
				
				
			## Apply Security Context to Your Pods and Containers ##
			
 - A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume.
 - Some of the important parameters are:									
									   |--- Security Context Setting --------------------------- Description ----------------------------------------------------|
									   | SecurityContext-> runAsNonRoot			  |	Indicates that containers should run as non-root user                        |
									   | SecurityContext- Capabilities			  |	Controls the Linux capabilities assigned to the container.                   |
									   | SecurityContext-> readOnlyRootFilesystem |	Controls whether a container will be able to write into the root filesystem. |
									   | PodSecurityContext-> runAsNonRoot		  |	Prevents running a container with ‘root’ user as part of the pod             |
									   |_________________________________________________________________________________________________________________________|									   
 - The following is an example for pod definition with security context parameters:
				apiVersion: v1  
				kind: Pod  
				metadata:  
				  name: hello-world  
				spec:  
				  containers:  
				  # specification of the pod’s containers  
				  # ...  
				  securityContext:  
					readOnlyRootFilesystem: true  
					runAsNonRoot: true
 - More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
 
 
 
			## Log Everything ##
			
 - Kubernetes supplies cluster-based logging, allowing to log container activity into a central log hub
 
 
 