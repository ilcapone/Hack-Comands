
Docu: https://kubernetes.io/docs/reference/access-authn-authz/rbac/

Login Plugin: https://github.com/int128/kubelogin

## Role
- A Role always sets permissions within a particular namespace
- Here’s an example Role in the “default” namespace that can be used to grant read access to pods:

		apiVersion: rbac.authorization.k8s.io/v1
		kind: Role
		metadata:
		  namespace: default
		  name: pod-reader
		rules:
		- apiGroups: [""] # "" indicates the core API group
		  resources: ["pods"]
		  verbs: ["get", "watch", "list"]

## ClusterRole
- By contrast, is a non-namespaced resource
- ClusterRoles have several uses. You can use a ClusterRole to:
	* define permissions on namespaced resources and be granted within individual namespace(s)
	* define permissions on namespaced resources and be granted across all namespaces
	* define permissions on cluster-scoped resources
- A ClusterRole can be used to grant the same permissions as a Role. Because ClusterRoles are cluster-scoped, you can also use them to grant access to:
	* cluster-scoped resources (like nodes)
	* non-resource endpoints (like /healthz)
	* namespaced resources (like Pods), across all namespaces For example: you can use a ClusterRole to allow a particular user to run kubectl get pods --all-namespaces
- Here is an example of a ClusterRole that can be used to grant read access to secrets in any particular namespace, or across all namespaces (depending on how it is bound):

		apiVersion: rbac.authorization.k8s.io/v1
		kind: ClusterRole
		metadata:
		  # "namespace" omitted since ClusterRoles are not namespaced
		  name: secret-reader
		rules:
		- apiGroups: [""]
		  #
		  # at the HTTP level, the name of the resource for accessing Secret
		  # objects is "secrets"
		  resources: ["secrets"]
		  verbs: ["get", "watch", "list"]


## RoleBinding and ClusterRoleBinding
A role binding grants the permissions defined in a role to a user or set of users. It holds a list of subjects (users, groups, or service accounts), and a reference to the role being granted. A RoleBinding grants permissions within a specific namespace whereas a ClusterRoleBinding grants that access cluster-wide.


## Creacion y Autenticacion de usuarios con Certificados ##

 - Usa un certificado para ser firmadao por la CA y asi poder autenticar usuarios validos
 	> En el certificado el termino CN (Comon Name) hace referencia al Usuario para k8
 	> En el certificado el termino O (Organization) hace referencoia al Grupo para k8

 - Proceso
 	# En la maquina del nuevo usuario
 	1º > openssl genrsa -out [username].key 2048
 	2º > openssl req -new -key [username].key -out [username].csr -subj "/CN=[username]/O=[Group]"
 	3ª > Envia el certificado al Administrador del Cluster K8

 	# En la maquina del administrador de kubernetes
 	4º > sudo openssl x509 -req -in [username].csr -CA [path of ca.crt] -CAkey [path of ca.key] -CAcreateserial -out [username].crt -days 30
 	5º (opcional) > openssl x509 -in [username].crt -noout -text


## Entendiendo las SA
- Siempre se crea una SA de nombre default cuando se crea un namespace
- Cada SA esta linckada a un secret (token)
- Cada secret lincado a un SA tiene:
	> ca.cdrt: certificado publico del cluster kubernetes
	> namespace
	> Token: en formato JWT
- Mount SA in Pod
	https://medium.com/better-programming/k8s-tips-using-a-serviceaccount-801c433d0023
- Para adjuntar una SA a un Pod Deve configurarse en el deployment
	spec:
		serviceAccountName: [SA-Name]
		container: 
			....
- Default mount path
	/run/secrets/kubernetes.io/serviceaccount/token

## Understanding deeper the roles and verbs
https://kubernetes.io/docs/reference/access-authn-authz/rbac/
https://kubernetes.io/docs/reference/access-authn-authz/authorization/
https://stackoverflow.com/questions/48118125/kubernetes-rbac-role-verbs-to-exec-to-pod

