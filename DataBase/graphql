
## General Information
https://prog.world/pentest-applications-with-graphql/

## How to do the querys
https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/graphql#querying

## View Graphiq scheme
https://apis.guru/graphql-voyager/

## BurpSuit Extension
https://portswigger.net/burp/documentation/desktop/testing-workflow/session-management/working-with-graphql

## Curls
curl -s -v  -XPOST -H "Content-Type:application/graphql" -H "x-api-key:<api-key>" -d '{ "query": "query {singleNote(id:29){record {name{value}}}}" }' https://<graphql-endpoint>/graphql

  ## Curl Querys
  { "query": "query {  __schema {    types {      name      fields {        name      }    }  }}" }


## Types of requests

    * Query: Are used to get / read data in the schema:
				query {
				  allPersons {
				    name
				  }
				}

    * Mutation:  is needed for writing, deleting and modifying data in GraphQL:
				mutation {
				  createPerson (name: "Bob", age: 37) {
				    id
				    name
				    age
				  }
				}

    * Description It is needed to notify users of any changes in the system. It works like this: the client subscribes to an event, 	after which a connection is established with the server (usually via WebSocket), and when this event occurs, the server sends 		a notification to the client via the established connection.
				subscription {
				  newPerson {
				    name
				    age
				    id
				  }
				}

	## Instrospection

	# Instrospection
	
    query IntrospectionQuery {
      __schema {
        
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          description
          
          locations
          args {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      description
      fields(includeDeprecated: true) {
        name
        description
        args {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        description
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      description
      type { ...TypeRef }
      defaultValue
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                  }
                }
              }
            }
          }
        }
      }
    }